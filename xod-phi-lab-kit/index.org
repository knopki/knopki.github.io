#+Title: Physics Lab Kit
#+Author: SK
#+OPTIONS: num:nil toc:nil reveal_single_file:nil
#+REVEAL_VERSION: 4
#+REVEAL_TRANS: slide
#+REVEAL_THEME: black
#+REVEAL_ROOT: revealjs
#+REVEAL_ADD_PLUGIN: audio-slideshow RevealAudioSlideshow plugin/audio-slideshow/plugin.js
#+REVEAL_PLUGINS: (notes audio-slideshow)
#+REVEAL_EXTRA_OPTIONS: audio: { defaultAudios: false, defaultNotes: true }
#+REVEAL_TITLE_SLIDE:

* Набор для лабораторных работ
:PROPERTIES:
:reveal_extra_attr:  data-audio-src="audio/hello.ogg"
:END:
Нажми на ~play~, чтобы включить электродокладчика ⬇

#+BEGIN_NOTES
Всем привет! Расскажу, каким мне видится проект. В основном, в его программной части.
#+END_NOTES

* Чего мы хотим
:PROPERTIES:
:reveal_extra_attr:  data-audio-src="audio/whatwewant.ogg"
:END:
- продавать школам наборы
- набор с головным контроллером
- набор с датчиками и пр. для раздела
- не продавать уже имеющееся в школах оборудование
- продвигать XOD

#+BEGIN_NOTES
Нам бы хотелось сделать набор для проведения лабораторок по физике и продавать его школам.
Набор поделить на несколько отдельно продающихся коробок:общая коробка с контроллером и по коробке на каждый раздел физики.
В школах уже есть куча оборудования. Нам не нужно пытаться его им продать снова, нам надо интегрироваться.
Дополнительно, хотелось бы продвигать XOD среди учителей и школьников.
#+END_NOTES
* Чего хочет школа
:PROPERTIES:
:reveal_extra_attr:  data-audio-src="audio/whattheywant.ogg"
:END:
- экономить время учителя
- не дорого (<20 т.р. за набор)

#+BEGIN_NOTES
Школа хотела бы не очень дорого.
Учителя хотели бы меньше тратить время. Очень важно оптимизировать труд учителя, а не нагрузить его дополнительной работой.
#+END_NOTES
* Чего хочет школа
:PROPERTIES:
:reveal_extra_attr:  data-audio-src="audio/whattheywantmore.ogg"
:END:
(мы додумали)
- работать offline
- свой контент

#+BEGIN_NOTES
Предполагаем, что не всегда и не во всех школах есть стабильный интернет. Надо дать возможность проведения лабораторной работы автономно.
Есть стандартный набор лабораторных работ, но нам бы хотелось дать учителю возможность создавать свои.
#+END_NOTES
* Возможная архитектура
:PROPERTIES:
:reveal_background: sunny.jpg
:reveal_extra_attr:  data-audio-src="audio/arch.ogg"
:END:

#+BEGIN_SRC plantuml :file arch.png
left to right direction
rectangle Класс {
  actor "Ученик" as sch
  [Конплюктер] as client
  [Контроллер] <<телеметрия, механика>> as ctl
  sch .. client : смотрит в браузер
  sch .. ctl : ставит эксперимент
}

rectangle "Учитель" {
  actor "Учитель" as teacher
  [Сервер] as srv
  [XOD] as xod
  teacher .. xod : программирует
  xod -> srv : публикует прошивку
  teacher .. srv : администрирует
}

client --> srv : http
ctl <-> srv : mqtt
#+END_SRC

#+BEGIN_NOTES
Возможная архитектура нашего набора.
На компьютере учителя или на Raspberry Pi установлен сервер.
Ученики обеспечиваются компьютерами или планшетами, на которых в браузере открыта страница лабораторной работы с сервера.
К лабораторному оборудованию добавляется наш контроллер с датчиками, сервами и так далее.
Контроллер подключается к Wi-Fi и по протоколу MQTT к серверу.
#+END_NOTES
* Что видит ученик
:PROPERTIES:
:reveal_extra_attr:  data-audio-src="audio/scholar.ogg"
:END:
#+BEGIN_SRC plantuml :file wireframe.png
left to right direction
!unquoted procedure SALT($x)
"{{
salt
%invoke_procedure("_"+$x)
}}" as $x
!endprocedure

!procedure _login()
{^"Лабораториум"
    Ученик    | "Пётр    "
    № места   | "4       "
        [ Войти ]
}
!endprocedure

!procedure _laba()
{^"Лабораторная работа №4"
  Описание работы. |
  {^"Иллюстрация"
  ...
  }
  .
  ~~
  .
  Инструкция какой датчик к чему подключать.
  .
  ~~
  .
  Данные с датчиков |
  {#
    . | A | V
    14:34:12.3 | 0.01 | 5.01
    14.34:13.1 | 0.02 | 4.2
    14.34:13.9 | 0.01 | 4.99
  }
  .
  ~~
  .
  Какие-то кнопочки действий: | [Запустить ракету] | [Испортить воздух]
  .
  ~~
  .
  Готовые графики. Возможность накидать какие-то свои.
  .
  ~~
  .
  Сохранить работу в файл: | [Сохранить]

}
!endprocedure

(*) --> SALT(login)
login --> SALT(laba)
#+END_SRC

#+BEGIN_NOTES
В браузере ученик должен как-то аутентифицироваться. Технически необходимо знать номер его контроллера.
Затем, ученик видит простой одностраничник текущей лабораторной работы. Что-то вроде электронного журнала лабораторных работ.
Страница состоит из простых блоков.
Rich text, иллюстрации, видео. Таблица с данными с датчиков. Если предусмотрено лабораторной работой, то какие-то кнопки для взаимодействия с контроллером. Например, чтобы запустить сценарий эксперимента.
Тут же какие-то готовые графики данных с датчиков. Возможность добавить какие-то свои.
Самое главное - возможность экспорта в Excel.
#+END_NOTES
* Контроллер
:PROPERTIES:
:reveal_extra_attr:  data-audio-src="audio/controller.ogg"
:END:
- датчики, сервы
- Wi-Fi клиент
- находит и подключается к MQTT серверу
- идентифицирует себя (MAC), чтобы сидеть на своём поддереве топиков

#+BEGIN_NOTES
Что нужно от контроллера.
Иметь простые и антивандальные интерфейсы подключения периферии.
Wi-fi.
Автоматическое подключение к MQTT серверу.
Возможность самоидентификации, чтобы не конфликтовать с другими контроллерами.
#+END_NOTES
** OTA-обновления
:PROPERTIES:
:reveal_extra_attr:  data-audio-src="audio/ota.ogg"
:END:
1. влетел на MQTT-сервер
2. увидел в топике ~/firmware/id~ требуемую прошивку
3. если не совпало, то прочитал  ~/firmware/url~
4. прошился

#+BEGIN_NOTES
Не все, но многие лабораторные работы могут требовать другую прошивку контроллера.

Алгоритм такой:
Контроллер подключается к MQTT-серверу и подписывается на топик firmware id.
Если идентификатор прошивки не совпадает с идентификатором его собственной прошивки, то он читает firmware url. Далее прошивается стандартным для себя способом. Например, в ESP8266 Arduino Core это буквально одна строка.
#+END_NOTES
** конфигурация
:PROPERTIES:
:reveal_extra_attr:  data-audio-src="audio/conf.ogg"
:END:
- для простых вещей перепрошивка избыточна
- простое конфигурирование можно брать из топика ~/cfg~
- простое: за что отвечают сенсоры
- простое: /If This Than That/
- см. конфиги ESPHome

#+BEGIN_NOTES
Для каких-то простых вещей перепрошивка может быть избыточна.
Конфигурацию можно брать тоже из MQTT.
Что может быть в конфигурации? Обновление сетевых настроек (с сохранением в EEPROM).
Можно задавать соответствие датчиков топикам.
Чуть сложнее - какие-то простые триггеры. Если в топике что-то, то сделать что-то.
Рекомендую посмотреть проект ESPHome и что там можно конфигурировать.
#+END_NOTES
** датчики
:PROPERTIES:
:reveal_extra_attr:  data-audio-src="audio/sensors.ogg"
:END:
- прочитал из датчика
- опубликовал в топик ~/ctl/.../sensor/temp~

#+BEGIN_NOTES
Контроллер читает данные с датчиков и шлёт их в соответствующие топики.
#+END_NOTES
** всякая механика
:PROPERTIES:
:reveal_extra_attr:  data-audio-src="audio/mecha.ogg"
:END:
- подписался на топик
- должался команды
- покрутил
- отписался в другой топик, что покрутил

#+BEGIN_NOTES
Контроллер подписывается на командные топики согласно конфигурации.
Когда получает команду, то крутит тем, чем должен. Потом рапортует в другие топики, что сделал это. Так на сервере будет информация, что действие произведено.
#+END_NOTES
* Сервер
:PROPERTIES:
:reveal_extra_attr:  data-audio-src="audio/srv.ogg"
:END:
- работает на компьютере учителя или на raspberry pi
- nodejs приложение:
  + mqtt в себе при помощи aedes или mosquitto рядом
  + морда на реакте для учеников
  + морда на реaкте для учителя
- обладает разными фичами ⬇

#+BEGIN_NOTES
Сервер должен работать на компьютере учителя или на Raspberry Pi. Неизвестно, что хуже. Очевидно, он должен находиться в той же сети, что и контроллеры, и компьютеры учеников.

Это может быть NodeJS приложение. Либо с moscquitto рядом, либо с реализацией MQTT сервера для NodeJS. Кстати, они все отвратительны.

Сервер должен показывать аж три разных интерфейса пользователя: ученический, учительский и редактор контента.
#+END_NOTES
** Редактор контента
:PROPERTIES:
:reveal_extra_attr:  data-audio-src="audio/content.ogg"
:END:
- есть встроенные лабы, но можно делать свои
- одна лаба = простой одностраничник из простых блоков
- блоки: wysiwyg текст, картинка, аттачменты, заранее заданные графики
- можно задать конфигурацию для контроллеров
- можно загрузить прошивку из XOD
- сериализуется в один файл

#+BEGIN_NOTES
Надо дать возможность учителю делать свои лабораторные работы.
Одна лаба - это один одностраничник из простых блоков. Тильда на самых минимальных минималках.
Блоки: rich text, картинка, видео, аттачменты, заранее заданные графики.
Тут же задаётся какая-то конфигурация для контроллера.
Сюда же загружается прошивка для контроллеров.
Всё это сериализуется в один файл.
#+END_NOTES
** Лабораторка
:PROPERTIES:
:reveal_extra_attr:  data-audio-src="audio/laba.ogg"
:END:
- загрузиться из файла
- прошивку и конфиг - в mqtt
- все сообщения из mqtt - в отдельный sqlite
- ученикам - вебморду для прохождения лабы
- учителю - простой мониторинг

#+BEGIN_NOTES
В режиме проведения лабораторной работы, учитель открывает файл с лабораторкой.
Сервер насыщает mqtt конфигурацией контроллеров, публикует прошивку.
Начинает сохранять все сообщения в отдельную базу sqlite. Отдельную в том смысле, что для каждой лабораторной работы сохраняется отдельный файл с базой.
Ученикам показывается одностраничник с их лабораторной работой.
Учителю показывается страничка с каким-то простым мониторингом. Чтобы он мог видеть, что контроллеры онлайн и всё окей. В идеале, чтобы он как-то мог наблюдать за процессом экспериментов.
#+END_NOTES
* Работа Offline
:PROPERTIES:
:reveal_extra_attr:  data-audio-src="audio/workoffline.ogg"
:END:
Доступ в интернет требуется только для XOD - установка платформ и библиотек, затем - запуск симуляций. Сам учебный процесс полностью автономен.

#+BEGIN_NOTES
В итоге, у нас получается система, для работы которой не нужен доступ в интернет. Сеть может быть нужна учителю для установки платформ и библиотек XOD, когда он захочет сделать свою прошивку.
#+END_NOTES
* Кастомизация
:PROPERTIES:
:reveal_extra_attr:  data-audio-src="audio/customization.ogg"
:END:
- учитель может делать свои лабораторки
- учитель может делать свои прошивки
- особо одаренные ученики могут сами запустить XOD и прошить контроллер через USB

#+BEGIN_NOTES
Учитель может делать свои прошивки. Учитель может делать свой контент для лабораторок. Контроллеры могут общаться друг с другом по сети, так что он может делать большие эксперименты из нескольких наборов.
Особо любопытным ученикам учитель может позволить запустить XOD на компьютере и прошивать контроллеры через USB. Скорее всего учителю будет лень, потому что после этого придётся приводить контроллер в чувства вручную.
#+END_NOTES
* Продвижение XOD
:PROPERTIES:
:reveal_extra_attr:  data-audio-src="audio/marketing.ogg"
:END:
~¯\_(ツ)_/¯~

#+BEGIN_NOTES
С этим всё сложно. Очевидно, мы продвигаем XOD среди учителей физики. Среди учеников XOD может продвигаться в формате каких-то кружков, т.к. для лабораторных работ по физике это немного неуместно.
#+END_NOTES
* Спасибо за внимание!
:PROPERTIES:
:reveal_extra_attr:  data-audio-src="audio/bye.ogg"
:END:

#+BEGIN_NOTES
Мик Дроп Жэ Пэ Гэ
#+END_NOTES
